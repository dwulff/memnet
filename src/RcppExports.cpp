// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// seed
NumericMatrix seed(int n, int m);
RcppExport SEXP memnet_seed(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(seed(n, m));
    return rcpp_result_gen;
END_RCPP
}
// sm
int sm(NumericVector x);
RcppExport SEXP memnet_sm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sm(x));
    return rcpp_result_gen;
END_RCPP
}
// getdegrees
std::vector<int> getdegrees(NumericMatrix adj, int pos);
RcppExport SEXP memnet_getdegrees(SEXP adjSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(getdegrees(adj, pos));
    return rcpp_result_gen;
END_RCPP
}
// getnonneighbors
std::vector<int> getnonneighbors(NumericMatrix adj, int node);
RcppExport SEXP memnet_getnonneighbors(SEXP adjSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(getnonneighbors(adj, node));
    return rcpp_result_gen;
END_RCPP
}
// selectnode
int selectnode(std::vector<int> ps);
RcppExport SEXP memnet_selectnode(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(selectnode(ps));
    return rcpp_result_gen;
END_RCPP
}
// stgame
NumericMatrix stgame(int n, int m);
RcppExport SEXP memnet_stgame(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(stgame(n, m));
    return rcpp_result_gen;
END_RCPP
}
// emptyseed
NumericMatrix emptyseed(int n);
RcppExport SEXP memnet_emptyseed(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(emptyseed(n));
    return rcpp_result_gen;
END_RCPP
}
// puni
double puni();
RcppExport SEXP memnet_puni() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(puni());
    return rcpp_result_gen;
END_RCPP
}
// unconnectedneighbor
int unconnectedneighbor(NumericMatrix adj, int from, int to);
RcppExport SEXP memnet_unconnectedneighbor(SEXP adjSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(unconnectedneighbor(adj, from, to));
    return rcpp_result_gen;
END_RCPP
}
// test
void test(int n, int m);
RcppExport SEXP memnet_test(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    test(n, m);
    return R_NilValue;
END_RCPP
}
// hkgame
NumericMatrix hkgame(int n, int m, double p);
RcppExport SEXP memnet_hkgame(SEXP nSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(hkgame(n, m, p));
    return rcpp_result_gen;
END_RCPP
}
// set
std::vector<std::string> set(std::vector<std::string> v);
RcppExport SEXP memnet_set(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set(v));
    return rcpp_result_gen;
END_RCPP
}
// mset
std::vector<std::string> mset(GenericVector dat);
RcppExport SEXP memnet_mset(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mset(dat));
    return rcpp_result_gen;
END_RCPP
}
// indx
int indx(std::string s, std::vector<std::string> set);
RcppExport SEXP memnet_indx(SEXP sSEXP, SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    rcpp_result_gen = Rcpp::wrap(indx(s, set));
    return rcpp_result_gen;
END_RCPP
}
// lags
GenericVector lags(GenericVector dat, int l);
RcppExport SEXP memnet_lags(SEXP datSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(lags(dat, l));
    return rcpp_result_gen;
END_RCPP
}
// strsplit
std::vector<std::string> strsplit(const std::string& s, const std::string& delim);
RcppExport SEXP memnet_strsplit(SEXP sSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(strsplit(s, delim));
    return rcpp_result_gen;
END_RCPP
}
// getinds
NumericMatrix getinds(std::vector<std::string> pairs, std::vector<std::string> unis);
RcppExport SEXP memnet_getinds(SEXP pairsSEXP, SEXP unisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unis(unisSEXP);
    rcpp_result_gen = Rcpp::wrap(getinds(pairs, unis));
    return rcpp_result_gen;
END_RCPP
}
// getpairs
CharacterMatrix getpairs(std::vector<std::string> spairs, std::string del);
RcppExport SEXP memnet_getpairs(SEXP spairsSEXP, SEXP delSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type spairs(spairsSEXP);
    Rcpp::traits::input_parameter< std::string >::type del(delSEXP);
    rcpp_result_gen = Rcpp::wrap(getpairs(spairs, del));
    return rcpp_result_gen;
END_RCPP
}
// count
std::vector<int> count(std::vector<std::string> v);
RcppExport SEXP memnet_count(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(count(v));
    return rcpp_result_gen;
END_RCPP
}
// mcount
std::vector<int> mcount(GenericVector dat);
RcppExport SEXP memnet_mcount(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mcount(dat));
    return rcpp_result_gen;
END_RCPP
}
// getprob
NumericVector getprob(std::vector<int> counts, double N);
RcppExport SEXP memnet_getprob(SEXP countsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(getprob(counts, N));
    return rcpp_result_gen;
END_RCPP
}
// pinwin
double pinwin(double n, double l);
RcppExport SEXP memnet_pinwin(SEXP nSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(pinwin(n, l));
    return rcpp_result_gen;
END_RCPP
}
// mpinwin
double mpinwin(NumericVector ns, double l);
RcppExport SEXP memnet_mpinwin(SEXP nsSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(mpinwin(ns, l));
    return rcpp_result_gen;
END_RCPP
}
// lens
NumericVector lens(GenericVector dat);
RcppExport SEXP memnet_lens(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(lens(dat));
    return rcpp_result_gen;
END_RCPP
}
// mlength
double mlength(GenericVector dat);
RcppExport SEXP memnet_mlength(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mlength(dat));
    return rcpp_result_gen;
END_RCPP
}
// getplink
NumericVector getplink(NumericMatrix inds, NumericVector probs, double pinwin);
RcppExport SEXP memnet_getplink(SEXP indsSEXP, SEXP probsSEXP, SEXP pinwinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type pinwin(pinwinSEXP);
    rcpp_result_gen = Rcpp::wrap(getplink(inds, probs, pinwin));
    return rcpp_result_gen;
END_RCPP
}
// dbinom
double dbinom(int k, int n, double p);
RcppExport SEXP memnet_dbinom(SEXP kSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(dbinom(k, n, p));
    return rcpp_result_gen;
END_RCPP
}
// pbinom
double pbinom(int k, int n, double p);
RcppExport SEXP memnet_pbinom(SEXP kSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbinom(k, n, p));
    return rcpp_result_gen;
END_RCPP
}
// goni_graph
CharacterMatrix goni_graph(GenericVector dat, int l, int min_cooc, double crit);
RcppExport SEXP memnet_goni_graph(SEXP datSEXP, SEXP lSEXP, SEXP min_coocSEXP, SEXP critSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type min_cooc(min_coocSEXP);
    Rcpp::traits::input_parameter< double >::type crit(critSEXP);
    rcpp_result_gen = Rcpp::wrap(goni_graph(dat, l, min_cooc, crit));
    return rcpp_result_gen;
END_RCPP
}
// rw_graph
CharacterMatrix rw_graph(GenericVector dat);
RcppExport SEXP memnet_rw_graph(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_graph(dat));
    return rcpp_result_gen;
END_RCPP
}
// unique_int
std::vector<int> unique_int(std::vector<int> v);
RcppExport SEXP memnet_unique_int(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_int(v));
    return rcpp_result_gen;
END_RCPP
}
// rint
int rint(int n);
RcppExport SEXP memnet_rint(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rint(n));
    return rcpp_result_gen;
END_RCPP
}
// runi
double runi();
RcppExport SEXP memnet_runi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(runi());
    return rcpp_result_gen;
END_RCPP
}
// get_adjlist
GenericVector get_adjlist(NumericMatrix adj);
RcppExport SEXP memnet_get_adjlist(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(get_adjlist(adj));
    return rcpp_result_gen;
END_RCPP
}
// get_neighborhood
NumericMatrix get_neighborhood(NumericMatrix adj, int start, int k);
RcppExport SEXP memnet_get_neighborhood(SEXP adjSEXP, SEXP startSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighborhood(adj, start, k));
    return rcpp_result_gen;
END_RCPP
}
// get_kneighbor
std::vector<int> get_kneighbor(NumericMatrix adj, int start, int k);
RcppExport SEXP memnet_get_kneighbor(SEXP adjSEXP, SEXP startSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_kneighbor(adj, start, k));
    return rcpp_result_gen;
END_RCPP
}
// tostring
inline Rcpp::CharacterVector tostring(std::vector<int> items);
RcppExport SEXP memnet_tostring(SEXP itemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type items(itemsSEXP);
    rcpp_result_gen = Rcpp::wrap(tostring(items));
    return rcpp_result_gen;
END_RCPP
}
// m_nn
double m_nn(double ele, std::vector<double> set, std::vector<double> rep);
RcppExport SEXP memnet_m_nn(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_nn(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_nc
std::string m_nc(double ele, std::vector<double> set, std::vector<std::string> rep);
RcppExport SEXP memnet_m_nc(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_nc(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_cn
double m_cn(std::string ele, std::vector<std::string> set, std::vector<double> rep);
RcppExport SEXP memnet_m_cn(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_cn(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_cc
std::string m_cc(std::string ele, std::vector<std::string> set, std::vector<std::string> rep);
RcppExport SEXP memnet_m_cc(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_cc(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_nn
std::vector<double> match_nn(std::vector<double> elems, std::vector<double> set, std::vector<double> rep);
RcppExport SEXP memnet_match_nn(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_nn(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_nc
std::vector<std::string> match_nc(std::vector<double> elems, std::vector<double> set, std::vector<std::string> rep);
RcppExport SEXP memnet_match_nc(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_nc(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_cn
std::vector<double> match_cn(std::vector<std::string> elems, std::vector<std::string> set, std::vector<double> rep);
RcppExport SEXP memnet_match_cn(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_cn(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_cc
std::vector<std::string> match_cc(std::vector<std::string> elems, std::vector<std::string> set, std::vector<std::string> rep);
RcppExport SEXP memnet_match_cc(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_cc(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// noverk
double noverk(int n, int k);
RcppExport SEXP memnet_noverk(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noverk(n, k));
    return rcpp_result_gen;
END_RCPP
}
// getneighbors
std::vector<int> getneighbors(GenericVector adjlist, int pos);
RcppExport SEXP memnet_getneighbors(SEXP adjlistSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighbors(adjlist, pos));
    return rcpp_result_gen;
END_RCPP
}
// getnext
int getnext(std::vector<int> neighbors);
RcppExport SEXP memnet_getnext(SEXP neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type neighbors(neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(getnext(neighbors));
    return rcpp_result_gen;
END_RCPP
}
// unicut
std::vector<int> unicut(std::vector<int> vs, int n);
RcppExport SEXP memnet_unicut(SEXP vsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unicut(vs, n));
    return rcpp_result_gen;
END_RCPP
}
// fluency
std::vector<int> fluency(GenericVector adjlist, int n, double pjump, int type);
RcppExport SEXP memnet_fluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(fluency(adjlist, n, pjump, type));
    return rcpp_result_gen;
END_RCPP
}
// mfluency
GenericVector mfluency(GenericVector adjlist, NumericVector n, double pjump, int type);
RcppExport SEXP memnet_mfluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mfluency(adjlist, n, pjump, type));
    return rcpp_result_gen;
END_RCPP
}
// ffluency
std::vector<int> ffluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_ffluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(ffluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mfsearch
GenericVector mfsearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_mfsearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mfsearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// efluency
std::vector<int> efluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_efluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(efluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mesearch
GenericVector mesearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_mesearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mesearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// sfluency
int sfluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_sfluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(sfluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mssearch
std::vector<int> mssearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP memnet_mssearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mssearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// rwalk
NumericMatrix rwalk(GenericVector adjlist, int start, std::vector<int> observe, int nmax, double pjump);
RcppExport SEXP memnet_rwalk(SEXP adjlistSEXP, SEXP startSEXP, SEXP observeSEXP, SEXP nmaxSEXP, SEXP pjumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type observe(observeSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    rcpp_result_gen = Rcpp::wrap(rwalk(adjlist, start, observe, nmax, pjump));
    return rcpp_result_gen;
END_RCPP
}
// mrwalk
NumericMatrix mrwalk(GenericVector adjlist, int start, std::vector<int> observe, int nrep, bool aggregate, int nmax, double pjump);
RcppExport SEXP memnet_mrwalk(SEXP adjlistSEXP, SEXP startSEXP, SEXP observeSEXP, SEXP nrepSEXP, SEXP aggregateSEXP, SEXP nmaxSEXP, SEXP pjumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type observe(observeSEXP);
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    rcpp_result_gen = Rcpp::wrap(mrwalk(adjlist, start, observe, nrep, aggregate, nmax, pjump));
    return rcpp_result_gen;
END_RCPP
}
// staSearch
NumericVector staSearch(NumericMatrix x);
RcppExport SEXP memnet_staSearch(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(staSearch(x));
    return rcpp_result_gen;
END_RCPP
}
// dynSearch
NumericVector dynSearch(NumericMatrix x);
RcppExport SEXP memnet_dynSearch(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dynSearch(x));
    return rcpp_result_gen;
END_RCPP
}
// notInVector
bool notInVector(int item, std::vector<int> set);
RcppExport SEXP memnet_notInVector(SEXP itemSEXP, SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type set(setSEXP);
    rcpp_result_gen = Rcpp::wrap(notInVector(item, set));
    return rcpp_result_gen;
END_RCPP
}
// staSearch2
NumericVector staSearch2(GenericVector x);
RcppExport SEXP memnet_staSearch2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(staSearch2(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"memnet_seed", (DL_FUNC) &memnet_seed, 2},
    {"memnet_sm", (DL_FUNC) &memnet_sm, 1},
    {"memnet_getdegrees", (DL_FUNC) &memnet_getdegrees, 2},
    {"memnet_getnonneighbors", (DL_FUNC) &memnet_getnonneighbors, 2},
    {"memnet_selectnode", (DL_FUNC) &memnet_selectnode, 1},
    {"memnet_stgame", (DL_FUNC) &memnet_stgame, 2},
    {"memnet_emptyseed", (DL_FUNC) &memnet_emptyseed, 1},
    {"memnet_puni", (DL_FUNC) &memnet_puni, 0},
    {"memnet_unconnectedneighbor", (DL_FUNC) &memnet_unconnectedneighbor, 3},
    {"memnet_test", (DL_FUNC) &memnet_test, 2},
    {"memnet_hkgame", (DL_FUNC) &memnet_hkgame, 3},
    {"memnet_set", (DL_FUNC) &memnet_set, 1},
    {"memnet_mset", (DL_FUNC) &memnet_mset, 1},
    {"memnet_indx", (DL_FUNC) &memnet_indx, 2},
    {"memnet_lags", (DL_FUNC) &memnet_lags, 2},
    {"memnet_strsplit", (DL_FUNC) &memnet_strsplit, 2},
    {"memnet_getinds", (DL_FUNC) &memnet_getinds, 2},
    {"memnet_getpairs", (DL_FUNC) &memnet_getpairs, 2},
    {"memnet_count", (DL_FUNC) &memnet_count, 1},
    {"memnet_mcount", (DL_FUNC) &memnet_mcount, 1},
    {"memnet_getprob", (DL_FUNC) &memnet_getprob, 2},
    {"memnet_pinwin", (DL_FUNC) &memnet_pinwin, 2},
    {"memnet_mpinwin", (DL_FUNC) &memnet_mpinwin, 2},
    {"memnet_lens", (DL_FUNC) &memnet_lens, 1},
    {"memnet_mlength", (DL_FUNC) &memnet_mlength, 1},
    {"memnet_getplink", (DL_FUNC) &memnet_getplink, 3},
    {"memnet_dbinom", (DL_FUNC) &memnet_dbinom, 3},
    {"memnet_pbinom", (DL_FUNC) &memnet_pbinom, 3},
    {"memnet_goni_graph", (DL_FUNC) &memnet_goni_graph, 4},
    {"memnet_rw_graph", (DL_FUNC) &memnet_rw_graph, 1},
    {"memnet_unique_int", (DL_FUNC) &memnet_unique_int, 1},
    {"memnet_rint", (DL_FUNC) &memnet_rint, 1},
    {"memnet_runi", (DL_FUNC) &memnet_runi, 0},
    {"memnet_get_adjlist", (DL_FUNC) &memnet_get_adjlist, 1},
    {"memnet_get_neighborhood", (DL_FUNC) &memnet_get_neighborhood, 3},
    {"memnet_get_kneighbor", (DL_FUNC) &memnet_get_kneighbor, 3},
    {"memnet_tostring", (DL_FUNC) &memnet_tostring, 1},
    {"memnet_m_nn", (DL_FUNC) &memnet_m_nn, 3},
    {"memnet_m_nc", (DL_FUNC) &memnet_m_nc, 3},
    {"memnet_m_cn", (DL_FUNC) &memnet_m_cn, 3},
    {"memnet_m_cc", (DL_FUNC) &memnet_m_cc, 3},
    {"memnet_match_nn", (DL_FUNC) &memnet_match_nn, 3},
    {"memnet_match_nc", (DL_FUNC) &memnet_match_nc, 3},
    {"memnet_match_cn", (DL_FUNC) &memnet_match_cn, 3},
    {"memnet_match_cc", (DL_FUNC) &memnet_match_cc, 3},
    {"memnet_noverk", (DL_FUNC) &memnet_noverk, 2},
    {"memnet_getneighbors", (DL_FUNC) &memnet_getneighbors, 2},
    {"memnet_getnext", (DL_FUNC) &memnet_getnext, 1},
    {"memnet_unicut", (DL_FUNC) &memnet_unicut, 2},
    {"memnet_fluency", (DL_FUNC) &memnet_fluency, 4},
    {"memnet_mfluency", (DL_FUNC) &memnet_mfluency, 4},
    {"memnet_ffluency", (DL_FUNC) &memnet_ffluency, 5},
    {"memnet_mfsearch", (DL_FUNC) &memnet_mfsearch, 5},
    {"memnet_efluency", (DL_FUNC) &memnet_efluency, 5},
    {"memnet_mesearch", (DL_FUNC) &memnet_mesearch, 5},
    {"memnet_sfluency", (DL_FUNC) &memnet_sfluency, 5},
    {"memnet_mssearch", (DL_FUNC) &memnet_mssearch, 5},
    {"memnet_rwalk", (DL_FUNC) &memnet_rwalk, 5},
    {"memnet_mrwalk", (DL_FUNC) &memnet_mrwalk, 7},
    {"memnet_staSearch", (DL_FUNC) &memnet_staSearch, 1},
    {"memnet_dynSearch", (DL_FUNC) &memnet_dynSearch, 1},
    {"memnet_notInVector", (DL_FUNC) &memnet_notInVector, 2},
    {"memnet_staSearch2", (DL_FUNC) &memnet_staSearch2, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_memnet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
